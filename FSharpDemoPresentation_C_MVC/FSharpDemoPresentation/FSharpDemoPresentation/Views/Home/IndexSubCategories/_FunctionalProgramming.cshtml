@model IList<FSharpDemoPresentation.Models.ChapterPresentation>

<section>
    <article>
        <header></header>
        <div id="FunctionalProgrammingContent">

        </div>
        <aside>
            <code>
<pre>
module FunctionalDemo
open System
open FSharpDemo1.Company
let people = [
                new Person("Person1", "NickName1", 33);
                new Person("Person2", "NickName2", 24);
                new Person("Person3", "NickName3", 50)
             ]
// ----- Total age -----
let mutable totalAge1 = 0
for p in people do
    totalAge1 <- totalage1 + p.age;
// -------------
let addAges (currentTotal : int) (p : Person) = currentTotal + p.Age
let iterateAndSum (people : Person list) =
    let mutable totalAge = 0
    for p in people do
        totalAge <- addages totalage p
    totalAge 
// -------------
let addAges2 (currentTotal : int) (p : Person) = currentTotal + p.Age
let iterateAndOperate (people : Person list) (op: int -> Person -> int) =
    let mutable totalAge = 0
    for p in people do
        totalAge <- op totalage p
    totalAge

let totalage2=iterateAndOperate people addages2 
// ---------------------
let iterateAndOperate2 (seed : 'b) (coll : 'a list) (op : ('b -> 'a -> 'b)) =
    let mutable total = seed
    for it in coll do
        total <- op total it
    total

let totalage3=iterateAndOperate2 0 people addages2 

// ----- XML transform -----
let personToXML (currentXML : string) (p : Person) =
    currentXML + "\n  < person > " + p.FirstName + "</person>"
let peopleXML = (iterateAndOperate2 " < people > " people personToXML) + "\n < /people > "
// ---------------
// fun : function in line
let peopleXML2 =
    (iterateAndOperate2 " < people > " people
        (fun (curr : string) (p : Person) ->
            curr + "\n  < person >" + p.FirstName + " < /person > ")) + "\n < / people > "
// --------------
let peopleXML3 = (List.fold (fun (curr) (p : Person) ->
                        curr + "\n  < person >" + p.FirstName + " < / person > ")
                    " < people > " people) + "\n < / people > "
// -- main --
let mainFunctionalProgramming () =
    printfn "Sample data : %A\n" people
    printfn "Total age for people list : %d\n" totalAge3
    printfn "Transform list to xml string :\n%s\n" peopleXML3

</pre>
            </code>
        </aside>
        <footer></footer>
    </article>
</section>

@if (Model != null)
{
    Html.RenderPartial("IndexSubCategories/_PictureDemo", Model);
}