
<section>
    <article>
        <header>Class</header>
        <div id="ClassContent">

        </div>
        <aside>
            <code><pre>
namespace FSharpDemo1.Company
open System
    // type Person
    type Person =
        val private m_FirstName : string
        val mutable private m_NickName : string
        val private m_Age : int
        val private m_ID : Guid
        [ < defaultvalue > ] static val mutable private countPerson : int
        new(first : string, nickName : string, age : int) = 
            {
                m_FirstName = first
                m_NickName = nickName
                m_Age = age
                m_ID = Guid.NewGuid()
            } then Person.countPerson <- person.countperson + 1
            member this.id=this.m_ID
            member this.firstname=this.m_FirstName
            member this.nickname
                with get()=this.m_NickName
                and set (value)=this.m_NickName<- value
            member this.age=this.m_Age
            member p.sayhowdy()=Console.WriteLine("{0} says, 'Howdy, all' !", p.firstname)
            override p.tostring()=String.Format("[Person: first={0}, nickname={1}, age={2}]",
               p.firstname, p.nickname, p.age)
                                                  
    // class Employ
    type Employee =
        inherit Person
        new() =
            {
                inherit Person("Anonymous", "Anonymous", 0)
            }
        new(first : string, nickName : string, age : int) = 
            {
                inherit Person(first, nickName, age)
            }
        new(person : Person) = 
            {
                inherit Person(person.FirstName, person.NickName, person.Age)
            }
 
    // class team leader
    type TeamLeader =
        inherit Employee
        new() =
            {
                inherit Employee("Anonymous", "Anonymous", 0)
            }
        new(first : string, nickName : string, age : int) = 
            {
                inherit Employee(first, nickName, age)
            }
        new(person : Person) = 
            {
                inherit Employee(person.FirstName, person.NickName, person.Age)
            }
            </pre></code>
            <br />
            <hr />
            Using it :<br />
            <code>
<pre>
module Hello
open Microsoft.FSharp.Collections
open System
open System.Collections.Generic
open FSharpDemo1.Company
// return "Hello World" by method
let returnHelloWorld =
    "Hello World !"
let SayHello(name: string) =
    "Hello " + 
        if not(System.String.IsNullOrEmpty(name)) then
            name
        else
            "World"
        + " !"
// Iteration sur Sequence ( {1, 2, 3, 4} )
let mySeq = [|1; 2; 3; 4|]
let mySeq2 = mySeq
                |> Seq.filter(fun num -> (num % 2) = 0 )
                |> Seq.iter(fun num -> printfn "%d" num)
// -- main --
let mainHello () =
    // Say hello
    printfn "%s" returnHelloWorld;
    // Say hello team // with tuple
    printfn "%s" (SayHello("Team DotNet"))
    // Create person (with C# philosophie)
    let people = new List < person > ()
    people.Add(new Employee("Person1", "NickName1", 33))
    people.Add(new Employee("Person2", "NickName2", 24))
    people.Add(new TeamLeader("Person3", "NickName3", 29))
    people.[1].SayHowdy()
    printfn "Maxime's ID : %s" (people.[1].ID.ToString())
    // Print Object
    printfn "%O" people
    printfn "%A" people
    
    // print NickName
    for tty in people do 
        Console.WriteLine(tty.NickName)
</pre>
            </code>
        </aside>
        <footer></footer>
    </article>
</section>